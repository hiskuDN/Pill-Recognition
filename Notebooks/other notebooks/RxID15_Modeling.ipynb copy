{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RxID15 Modeling",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/a-woodbury/RxID/blob/master/RxID15_Modeling.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "kYtcNyOWHCIA"
      },
      "source": [
        "# Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "691yzx9_2EyJ",
        "colab_type": "text"
      },
      "source": [
        "## Environment Prep"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K5C4eYiY10sG",
        "colab_type": "text"
      },
      "source": [
        "### Package Import"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IekFcsv-r2WS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "! pip install yellowbrick # not installed with colab by default"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "DKzNLuXsHCIA",
        "colab": {}
      },
      "source": [
        "import os\n",
        "import sys\n",
        "\n",
        "#standard imports\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pickle\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "#for any image manipulation\n",
        "import imageio\n",
        "import imgaug as ia\n",
        "from PIL import ImageFile\n",
        "ImageFile.LOAD_TRUNCATED_IMAGES = True\n",
        "\n",
        "import scipy\n",
        "from PIL import Image\n",
        "from scipy import ndimage\n",
        "\n",
        "# using tensorflow and keras\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from keras import layers\n",
        "from keras import models\n",
        "from keras import optimizers\n",
        "from keras import models\n",
        "from keras import layers\n",
        "import keras_metrics\n",
        "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
        "from keras.models import Model\n",
        "from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n",
        "\n",
        "#for classification report\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "from sklearn.metrics import confusion_matrix,plot_confusion_matrix, r2_score, recall_score, precision_score, f1_score, accuracy_score\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "np.random.seed(123)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2-V40KotO8sr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "byFkOorREpoW",
        "colab_type": "text"
      },
      "source": [
        "### Functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pN3eeMKTyCDk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "JMt2RES_VrWU",
        "colab": {}
      },
      "source": [
        "# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.\n",
        "def plotImages(images_arr):\n",
        "    fig, axes = plt.subplots(1, 5, figsize=(40,40))\n",
        "    axes = axes.flatten()\n",
        "    for img, ax in zip(images_arr, axes):\n",
        "        ax.imshow(img)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yq5QdozRJyda",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.\n",
        "def plotImages(images_arr):\n",
        "    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n",
        "    axes = axes.flatten()\n",
        "    for img, ax in zip(images_arr, axes):\n",
        "        ax.imshow(img)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XqMPcCnG-YLF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def random_crop(img, random_crop_size):\n",
        "    # Note: image_data_format is 'channel_last'\n",
        "    assert img.shape[2] == 3\n",
        "    height, width = img.shape[0], img.shape[1]\n",
        "    dy, dx = random_crop_size\n",
        "    x = np.random.randint(0, width - dx + 1)\n",
        "    y = np.random.randint(0, height - dy + 1)\n",
        "    return img[y:(y+dy), x:(x+dx), :]\n",
        "\n",
        "\n",
        "def crop_generator(batches, crop_length):\n",
        "    \"\"\"Take as input a Keras ImageGen (Iterator) and generate random\n",
        "    crops from the image batches generated by the original iterator.\n",
        "    \"\"\"\n",
        "    while True:\n",
        "        batch_x, batch_y = next(batches)\n",
        "        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))\n",
        "        for i in range(batch_x.shape[0]):\n",
        "            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))\n",
        "        yield (batch_crops, batch_y)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6o0IJ9j24RGx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_conf_matrix(df_confusion, title='Confusion matrix', cmap=plt.cm.gray_r):\n",
        "  plt.matshow(df_confusion, cmap=cmap) \n",
        "  # imshow\n",
        "  #plt.title(title)\n",
        "  plt.colorbar()\n",
        "  tick_marks = np.arange(len(df_confusion.columns))\n",
        "  plt.xticks(tick_marks, df_confusion.columns, rotation=45)\n",
        "  plt.yticks(tick_marks, df_confusion.index)\n",
        "  #plt.tight_layout()\n",
        "  plt.ylabel(df_confusion.index.name)\n",
        "  plt.xlabel(df_confusion.columns.name)\n",
        "  plot_confusion_matrix(df_confusion) "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J5u5YY2P4mnQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_conf_matrix(df_confusion, title='Confusion matrix', cmap=plt.cm.gray_r):\n",
        "  plt.matshow(df_confusion, cmap=cmap) # imshow\n",
        "  #plt.title(title)\n",
        "  plt.colorbar()\n",
        "  tick_marks = np.arange(len(df_confusion.columns))\n",
        "  plt.xticks(tick_marks, df_confusion.columns, rotation=45)\n",
        "  plt.yticks(tick_marks, df_confusion.index)\n",
        "  #plt.tight_layout()\n",
        "  plt.ylabel(df_confusion.index.name)\n",
        "  plt.xlabel(df_confusion.columns.name)\n",
        "  plot_confusion_matrix(df_confusion)\n",
        "  \n",
        " #df_confusion = pd.crosstab(y_actu, y_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NUa0et5v2JPX",
        "colab_type": "text"
      },
      "source": [
        "## Data Prep"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "ncnwmilLHCIG"
      },
      "source": [
        "### Data import"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8PnL3sGGyNI3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "drugs_dict = {'00006074554': 'HYZAAR 100-12.',\n",
        " '00009033102': 'CLEOCIN 75MG',\n",
        " '00093402901': 'INDOMETHACIN',\n",
        " '00093576756': 'OLANZAPINE 2.5MG',\n",
        " '00555188302': 'BENZONATATE',\n",
        " '00591084510': 'GLIPIZIDE ER 10MG',\n",
        " '00781196160': 'CLARITHROMYCIN 250MG',\n",
        " '23155010501': 'HYDROXYZINE HCL 10MG',\n",
        " '24090047988': 'INDERAL LA 160MG',\n",
        " '24486060310': 'HYOMAX-FT 0.125MG',\n",
        " '24486060490': 'HYOMAX-DT 0.375MG',\n",
        " '55111068305': 'IBUPROFEN 600MG',\n",
        " '64125013010': 'HCTZ 50MG',\n",
        " '65862019430': 'FLUOXETINE 40MG ',\n",
        " '65862019905': 'GABAPENTIN 300MG'}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6SL58wXXHCIH",
        "colab": {}
      },
      "source": [
        "data ='/content/drive/My Drive/RxID/RxID15/modeldata'\n",
        "test_folder = '/content/drive/My Drive/RxID/RxID15/modeldata/test'\n",
        "train_folder = '/content/drive/My Drive/RxID/RxID15/modeldata/train'\n",
        "val_folder = '/content/drive/My Drive/RxID/RxID15/modeldata/validation'\n",
        "rw_folder = '/content/drive/My Drive/RxID/RxID15/Realworld images'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1o82Q2Dxwvgs",
        "colab_type": "text"
      },
      "source": [
        "# Modeling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "x3VOTGc7HCIW"
      },
      "source": [
        "## model1 - Acc: 0.47"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rsctFkrzKGnY",
        "colab_type": "code",
        "outputId": "4e8339c9-669c-43c2-bc1e-34008f008da5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 32 \n",
        "EPOCHS = 25\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "\n",
        "model1 = models.Sequential(name='model1')\n",
        "\n",
        "model1.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model1.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model1.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model1.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model1.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model1.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model1.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model1.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model1.add(layers.Flatten())\n",
        "model1.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "model1.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model1.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model1.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model1.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "model1_train_results = model1.evaluate(train_generator)\n",
        "model1_val_results = model1.evaluate(val_generator)\n",
        "model1_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs_range = range(EPOCHS)\n",
        "\n",
        "plt.figure(figsize=(16, 8))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "plt.legend(loc='lower right')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "\n",
        "plt.subplot(1, 3, 3)\n",
        "plt.plot(epochs_range, loss, label='Training Loss')\n",
        "plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "plt.legend(loc='upper right')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.savefig('/content/drive/My Drive/RxID/RxID15/Model Images/{}-AccLoss.png'.format(model1.name))\n",
        "plt.show()\n",
        "model1_val_results"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 74 images belonging to 15 classes.\n",
            "Found 150 images belonging to 15 classes.\n",
            "Found 525 images belonging to 15 classes.\n",
            "Model: \"model1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_19 (Conv2D)           (None, 30, 30, 768)       21504     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_16 (MaxPooling (None, 10, 10, 768)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_20 (Conv2D)           (None, 10, 10, 1024)      7078912   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_17 (MaxPooling (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_21 (Conv2D)           (None, 3, 3, 512)         4719104   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_18 (MaxPooling (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_22 (Conv2D)           (None, 1, 1, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "flatten_4 (Flatten)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 15)                3855      \n",
            "=================================================================\n",
            "Total params: 13,003,279\n",
            "Trainable params: 13,003,279\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 2.7188 - acc: 0.0610 - val_loss: 2.7066 - val_acc: 0.0667\n",
            "\n",
            "Epoch 00001: val_acc improved from -inf to 0.06667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 2/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 2.7042 - acc: 0.0800 - val_loss: 2.6340 - val_acc: 0.0933\n",
            "\n",
            "Epoch 00002: val_acc improved from 0.06667 to 0.09333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 3/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 2.6764 - acc: 0.0952 - val_loss: 2.3285 - val_acc: 0.1200\n",
            "\n",
            "Epoch 00003: val_acc improved from 0.09333 to 0.12000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 4/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 2.5828 - acc: 0.1352 - val_loss: 1.3409 - val_acc: 0.2267\n",
            "\n",
            "Epoch 00004: val_acc improved from 0.12000 to 0.22667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 5/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 2.3808 - acc: 0.1886 - val_loss: 1.3703 - val_acc: 0.2800\n",
            "\n",
            "Epoch 00005: val_acc improved from 0.22667 to 0.28000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 6/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 2.1141 - acc: 0.2552 - val_loss: 1.5284 - val_acc: 0.2400\n",
            "\n",
            "Epoch 00006: val_acc did not improve from 0.28000\n",
            "Epoch 7/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 2.0991 - acc: 0.2305 - val_loss: 0.9600 - val_acc: 0.3333\n",
            "\n",
            "Epoch 00007: val_acc improved from 0.28000 to 0.33333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 8/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.9993 - acc: 0.2686 - val_loss: 2.3170 - val_acc: 0.3000\n",
            "\n",
            "Epoch 00008: val_acc did not improve from 0.33333\n",
            "Epoch 9/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 2.0217 - acc: 0.2781 - val_loss: 0.9988 - val_acc: 0.3933\n",
            "\n",
            "Epoch 00009: val_acc improved from 0.33333 to 0.39333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 10/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.8868 - acc: 0.3067 - val_loss: 0.7033 - val_acc: 0.2867\n",
            "\n",
            "Epoch 00010: val_acc did not improve from 0.39333\n",
            "Epoch 11/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.9209 - acc: 0.2914 - val_loss: 0.8440 - val_acc: 0.3600\n",
            "\n",
            "Epoch 00011: val_acc did not improve from 0.39333\n",
            "Epoch 12/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.8381 - acc: 0.3581 - val_loss: 0.9839 - val_acc: 0.2733\n",
            "\n",
            "Epoch 00012: val_acc did not improve from 0.39333\n",
            "Epoch 13/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.7877 - acc: 0.3352 - val_loss: 1.1731 - val_acc: 0.4267\n",
            "\n",
            "Epoch 00013: val_acc improved from 0.39333 to 0.42667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 14/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.6888 - acc: 0.3505 - val_loss: 0.3129 - val_acc: 0.4400\n",
            "\n",
            "Epoch 00014: val_acc improved from 0.42667 to 0.44000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 15/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.7070 - acc: 0.3505 - val_loss: 2.9252 - val_acc: 0.2867\n",
            "\n",
            "Epoch 00015: val_acc did not improve from 0.44000\n",
            "Epoch 16/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.7138 - acc: 0.3733 - val_loss: 0.8900 - val_acc: 0.4267\n",
            "\n",
            "Epoch 00016: val_acc did not improve from 0.44000\n",
            "Epoch 17/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5958 - acc: 0.3600 - val_loss: 0.9396 - val_acc: 0.3667\n",
            "\n",
            "Epoch 00017: val_acc did not improve from 0.44000\n",
            "Epoch 18/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6464 - acc: 0.3905 - val_loss: 0.8056 - val_acc: 0.4000\n",
            "\n",
            "Epoch 00018: val_acc did not improve from 0.44000\n",
            "Epoch 19/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.6673 - acc: 0.4114 - val_loss: 1.2417 - val_acc: 0.4000\n",
            "\n",
            "Epoch 00019: val_acc did not improve from 0.44000\n",
            "Epoch 20/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6050 - acc: 0.4095 - val_loss: 0.7434 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00020: val_acc did not improve from 0.44000\n",
            "Epoch 21/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6816 - acc: 0.4000 - val_loss: 1.7861 - val_acc: 0.3933\n",
            "\n",
            "Epoch 00021: val_acc did not improve from 0.44000\n",
            "Epoch 22/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6750 - acc: 0.4038 - val_loss: 0.9880 - val_acc: 0.4067\n",
            "\n",
            "Epoch 00022: val_acc did not improve from 0.44000\n",
            "Epoch 23/25\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.5353 - acc: 0.4476 - val_loss: 0.3166 - val_acc: 0.4667\n",
            "\n",
            "Epoch 00023: val_acc improved from 0.44000 to 0.46667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 24/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5317 - acc: 0.4248 - val_loss: 0.6097 - val_acc: 0.4733\n",
            "\n",
            "Epoch 00024: val_acc improved from 0.46667 to 0.47333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model1.h5\n",
            "Epoch 25/25\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4396 - acc: 0.4705 - val_loss: 0.4566 - val_acc: 0.4667\n",
            "\n",
            "Epoch 00025: val_acc did not improve from 0.47333\n",
            "17/17 [==============================] - 62s 4s/step\n",
            "5/5 [==============================] - 16s 3s/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4565650224685669, 0.46666666865348816]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "06MOSH_HHCIY"
      },
      "source": [
        "## model2 - Acc: 0.44"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "1fa1d04c-06e5-427e-f706-a0c0a818d507",
        "id": "mYPdYG4sDS5w",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 48 \n",
        "EPOCHS = 25\n",
        "plottrain = True\n",
        "\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "\n",
        "model2 = models.Sequential(name='model2')\n",
        "\n",
        "model2.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model2.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model2.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model2.add(layers.MaxPooling2D((3, 3)))\n",
        "#model2.add(layers.Dropout(0.05)\n",
        "\n",
        "model2.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model2.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model2.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model2.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model2.add(layers.Flatten())\n",
        "model2.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "model2.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model2.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model2.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model2.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train1 = model2.evaluate(train_generator)\n",
        "model2_val_results = model2.evaluate(val_generator)\n",
        "model2_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "if plottrain == True:\n",
        "  acc = history.history['acc']\n",
        "  val_acc = history.history['val_acc']\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs_range = range(EPOCHS)\n",
        "\n",
        "  plt.figure(figsize=(16, 8))\n",
        "  plt.subplot(1, 2, 1)\n",
        "  plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "  plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "\n",
        "  plt.subplot(1, 3, 3)\n",
        "  plt.plot(epochs_range, loss, label='Training Loss')\n",
        "  plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  plt.savefig('./foo.png')\n",
        "  plt.show()\n",
        "model2_val_results"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 74 images belonging to 15 classes.\n",
            "Found 150 images belonging to 15 classes.\n",
            "Found 525 images belonging to 15 classes.\n",
            "Model: \"model2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 46, 46, 768)       21504     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 15, 15, 768)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 15, 15, 1024)      7078912   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 5, 5, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 5, 5, 512)         4719104   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 1, 1, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 15)                3855      \n",
            "=================================================================\n",
            "Total params: 13,003,279\n",
            "Trainable params: 13,003,279\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/25\n",
            "17/17 [==============================] - 159s 9s/step - loss: 2.7226 - acc: 0.0648 - val_loss: 2.7120 - val_acc: 0.1400\n",
            "\n",
            "Epoch 00001: val_acc improved from -inf to 0.14000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 2/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.6921 - acc: 0.1067 - val_loss: 2.7082 - val_acc: 0.1000\n",
            "\n",
            "Epoch 00002: val_acc did not improve from 0.14000\n",
            "Epoch 3/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.5892 - acc: 0.1048 - val_loss: 2.5833 - val_acc: 0.1400\n",
            "\n",
            "Epoch 00003: val_acc did not improve from 0.14000\n",
            "Epoch 4/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.4729 - acc: 0.1543 - val_loss: 2.4809 - val_acc: 0.1800\n",
            "\n",
            "Epoch 00004: val_acc improved from 0.14000 to 0.18000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 5/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.3651 - acc: 0.1562 - val_loss: 2.5307 - val_acc: 0.2133\n",
            "\n",
            "Epoch 00005: val_acc improved from 0.18000 to 0.21333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 6/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.2517 - acc: 0.2095 - val_loss: 2.1142 - val_acc: 0.1933\n",
            "\n",
            "Epoch 00006: val_acc did not improve from 0.21333\n",
            "Epoch 7/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 2.1977 - acc: 0.2000 - val_loss: 1.4673 - val_acc: 0.2667\n",
            "\n",
            "Epoch 00007: val_acc improved from 0.21333 to 0.26667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 8/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.9896 - acc: 0.2610 - val_loss: 0.9334 - val_acc: 0.2600\n",
            "\n",
            "Epoch 00008: val_acc did not improve from 0.26667\n",
            "Epoch 9/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.9649 - acc: 0.2819 - val_loss: 0.7494 - val_acc: 0.2467\n",
            "\n",
            "Epoch 00009: val_acc did not improve from 0.26667\n",
            "Epoch 10/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.9301 - acc: 0.3010 - val_loss: 1.0662 - val_acc: 0.3000\n",
            "\n",
            "Epoch 00010: val_acc improved from 0.26667 to 0.30000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 11/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.8506 - acc: 0.3162 - val_loss: 0.9867 - val_acc: 0.3133\n",
            "\n",
            "Epoch 00011: val_acc improved from 0.30000 to 0.31333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 12/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.7742 - acc: 0.3429 - val_loss: 1.0048 - val_acc: 0.3600\n",
            "\n",
            "Epoch 00012: val_acc improved from 0.31333 to 0.36000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 13/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.6787 - acc: 0.4019 - val_loss: 0.7698 - val_acc: 0.3800\n",
            "\n",
            "Epoch 00013: val_acc improved from 0.36000 to 0.38000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 14/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.6488 - acc: 0.3714 - val_loss: 1.1121 - val_acc: 0.3933\n",
            "\n",
            "Epoch 00014: val_acc improved from 0.38000 to 0.39333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 15/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.6726 - acc: 0.3714 - val_loss: 1.0819 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00015: val_acc improved from 0.39333 to 0.42000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 16/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.5849 - acc: 0.4362 - val_loss: 0.4272 - val_acc: 0.4600\n",
            "\n",
            "Epoch 00016: val_acc improved from 0.42000 to 0.46000, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 17/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.5388 - acc: 0.4343 - val_loss: 1.4020 - val_acc: 0.3600\n",
            "\n",
            "Epoch 00017: val_acc did not improve from 0.46000\n",
            "Epoch 18/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.5785 - acc: 0.4171 - val_loss: 0.3052 - val_acc: 0.4267\n",
            "\n",
            "Epoch 00018: val_acc did not improve from 0.46000\n",
            "Epoch 19/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.4958 - acc: 0.4457 - val_loss: 0.8848 - val_acc: 0.4667\n",
            "\n",
            "Epoch 00019: val_acc improved from 0.46000 to 0.46667, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 20/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.3985 - acc: 0.4571 - val_loss: 0.8598 - val_acc: 0.3933\n",
            "\n",
            "Epoch 00020: val_acc did not improve from 0.46667\n",
            "Epoch 21/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.4219 - acc: 0.4686 - val_loss: 0.8153 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00021: val_acc did not improve from 0.46667\n",
            "Epoch 22/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.4057 - acc: 0.4895 - val_loss: 0.5845 - val_acc: 0.5133\n",
            "\n",
            "Epoch 00022: val_acc improved from 0.46667 to 0.51333, saving model to /content/drive/My Drive/RxID/RxID15/Models/RxID15model2.h5\n",
            "Epoch 23/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.3774 - acc: 0.5086 - val_loss: 0.8499 - val_acc: 0.4667\n",
            "\n",
            "Epoch 00023: val_acc did not improve from 0.51333\n",
            "Epoch 24/25\n",
            "17/17 [==============================] - 66s 4s/step - loss: 1.2771 - acc: 0.5200 - val_loss: 0.5010 - val_acc: 0.5000\n",
            "\n",
            "Epoch 00024: val_acc did not improve from 0.51333\n",
            "Epoch 25/25\n",
            "17/17 [==============================] - 67s 4s/step - loss: 1.2917 - acc: 0.5276 - val_loss: 0.6940 - val_acc: 0.4400\n",
            "\n",
            "Epoch 00025: val_acc did not improve from 0.51333\n",
            "17/17 [==============================] - 63s 4s/step\n",
            "5/5 [==============================] - 17s 3s/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.694034218788147, 0.4399999976158142]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SlzKVqkIwnOp",
        "colab_type": "code",
        "outputId": "28d3c50c-7ef8-47d8-b832-47964f0c2b6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "model2.predict(test_images[:1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[8.9223413e-08, 9.9975592e-01, 1.5309214e-06, 2.2928591e-04,\n",
              "        1.3173030e-05, 9.1070079e-10, 2.4662183e-10, 1.4682051e-08]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tyDPb3haxOMZ",
        "colab_type": "code",
        "outputId": "bf2b2c21-6f28-440f-8f12-63b934c3d4f9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "model2.predict_classes(test_images[:5])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 4, 5, 5, 0, 0, 4, 6, 0, 0, 0, 0, 3, 1, 5, 1, 0, 4, 1, 5, 1, 2,\n",
              "       0, 6, 7, 3, 5, 2, 4, 5, 2, 0, 1, 7, 1, 5, 0, 5, 1, 5, 7, 2, 6, 5,\n",
              "       7, 6, 6, 3, 6, 2, 3, 6, 6, 7, 7, 2, 2, 7])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZxYZoSWh3T7J",
        "colab_type": "code",
        "outputId": "64905d71-bda4-4894-d8cf-7f9d6ef228cf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "test_labels[0]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 1., 0., 0., 0., 0., 0., 0.], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RdxC526-3jZe",
        "colab_type": "code",
        "outputId": "efac7e76-a7e2-4548-8fe1-b3d52c2ea14d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        }
      },
      "source": [
        "plt.imshow(test_images[:1][0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ff603ae0e80>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "RQCNPDKuUh9p"
      },
      "source": [
        "## model3 - Acc: 0.58"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9eae8855-95b1-48f4-de48-fc132574eb45",
        "id": "k75hL7iQUh9q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 232
        }
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 32 \n",
        "EPOCHS = 50\n",
        "plottrain = True\n",
        "\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "# model3 = VGG16(weights='imagenet', include_top=False,input_shape=(IMG_SHAPE ,IMG_SHAPE,  3))\n",
        "# model3.layers.pop()\n",
        "# model3 = Model(inputs=model3.inputs, outputs=model3.layers[-1].output)\n",
        "\n",
        "model3 = models.Sequential(name='CNN 4')\n",
        "\n",
        "model3.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model3.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "\n",
        "model3.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((3, 3)))\n",
        "model3.add(layers.Dropout(0.05))\n",
        "\n",
        "model3.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model3.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model3.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model3.add(layers.Flatten())\n",
        "model3.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "# learning\n",
        "\n",
        "model3.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model3.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model3.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model3.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train1 = model3.evaluate(train_generator)\n",
        "model3_val_results = model3.evaluate(val_generator)\n",
        "model3_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "if plottrain == True:\n",
        "  acc = history.history['acc']\n",
        "  val_acc = history.history['val_acc']\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs_range = range(EPOCHS)\n",
        "\n",
        "  plt.figure(figsize=(16, 8))\n",
        "  plt.subplot(1, 2, 1)\n",
        "  plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "  plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "\n",
        "  plt.subplot(1, 3, 3)\n",
        "  plt.plot(epochs_range, loss, label='Training Loss')\n",
        "  plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  plt.savefig('/content/drive/My Drive/RxID/RxID15/Model Images/{}-Acc_Loss.png'.format(model3.name))\n",
        "  plt.show()\n",
        "model3_val_results"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-f88dae73e5f3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n\u001b[0m\u001b[1;32m      8\u001b[0m                                                                         \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                                                                         \u001b[0mtarget_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mIMG_SHAPE\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mIMG_SHAPE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'ImageDataGenerator' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vsoYLH3Pjz29",
        "colab_type": "text"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "nxWtkrMpkrje"
      },
      "source": [
        "## model4 - Acc: 0.65\n",
        "\n",
        "- dropout\n",
        "- 100 epochs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "GS9srx0bkrjf",
        "colab": {}
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 32 \n",
        "EPOCHS = 100\n",
        "plottrain = True\n",
        "\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "# model4 = VGG16(weights='imagenet', include_top=False,input_shape=(IMG_SHAPE ,IMG_SHAPE,  3))\n",
        "# model4.layers.pop()\n",
        "# model4 = Model(inputs=model4.inputs, outputs=model4.layers[-1].output)\n",
        "\n",
        "model4 = models.Sequential(name='CNN 4')\n",
        "\n",
        "model4.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model4.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "\n",
        "model4.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model4.add(layers.MaxPooling2D((3, 3)))\n",
        "model4.add(layers.Dropout(0.05))\n",
        "\n",
        "model4.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model4.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model4.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model4.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model4.add(layers.Flatten())\n",
        "model4.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "# learning\n",
        "\n",
        "model4.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model4.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model4.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model4.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train1 = model4.evaluate(train_generator)\n",
        "model4_val_results = model4.evaluate(val_generator)\n",
        "model4_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "if plottrain == True:\n",
        "  acc = history.history['acc']\n",
        "  val_acc = history.history['val_acc']\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs_range = range(EPOCHS)\n",
        "\n",
        "  plt.figure(figsize=(16, 8))\n",
        "  plt.subplot(1, 2, 1)\n",
        "  plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "  plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "\n",
        "  plt.subplot(1, 3, 3)\n",
        "  plt.plot(epochs_range, loss, label='Training Loss')\n",
        "  plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  plt.savefig('/content/drive/My Drive/RxID/RxID15/Model Images/{}-Acc_Loss.png'.format(model4.name))\n",
        "  plt.show()\n",
        "model4_val_results"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "930sSn4xmsQn",
        "colab_type": "code",
        "outputId": "0d7a4ab0-34cd-485b-ebc3-f6bf8d1b72fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        }
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"CNN 4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 30, 30, 768)       21504     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 10, 10, 768)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 10, 10, 1024)      7078912   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 3, 3, 512)         4719104   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 1, 1, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 15)                3855      \n",
            "=================================================================\n",
            "Total params: 13,003,279\n",
            "Trainable params: 13,003,279\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2a9iW1aCm8Cd",
        "colab_type": "code",
        "outputId": "e19a3a0b-b752-4f33-fa4f-54af1164d0b3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        }
      },
      "source": [
        "model5.load_weights('/content/drive/My Drive/RxID/RxID15/Models/RxID15CNN 4.h5')\n",
        "model5.summary()\n",
        "model_4_val_results = model5.evaluate(val_generator)\n",
        "model_4_val_results"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"CNN 4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 30, 30, 768)       21504     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 10, 10, 768)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 10, 10, 1024)      7078912   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 3, 3, 512)         4719104   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 1, 1, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 15)                3855      \n",
            "=================================================================\n",
            "Total params: 13,003,279\n",
            "Trainable params: 13,003,279\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "5/5 [==============================] - 16s 3s/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.1257256716489792, 0.6600000262260437]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FOz63TF1s8XG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class_keys = list(train_generator.class_indices.keys())\n",
        "class_values = list(train_generator.class_indices.values())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "alijJqiZtNOD",
        "colab_type": "code",
        "outputId": "2e538ac0-9e95-45aa-a5b5-683dfab9dbf5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "class_keys[class_values.index(0)]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'00006074554'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "sQlp3ZGIl7Gk"
      },
      "source": [
        "## model5 - ...\n",
        "\n",
        "\n",
        "- dropout\n",
        "- 150 epochs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "2v7CMADUl7Gl",
        "colab": {}
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 32 \n",
        "EPOCHS = 250\n",
        "plottrain = True\n",
        "\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "# model5 = VGG16(weights='imagenet', include_top=False,input_shape=(IMG_SHAPE ,IMG_SHAPE,  3))\n",
        "# model5.layers.pop()\n",
        "# model5 = Model(inputs=model5.inputs, outputs=model5.layers[-1].output)\n",
        "\n",
        "model5 = models.Sequential(name='CNN 4')\n",
        "\n",
        "model5.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model5.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "\n",
        "model5.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model5.add(layers.MaxPooling2D((3, 3)))\n",
        "model5.add(layers.Dropout(0.05))\n",
        "\n",
        "model5.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model5.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model5.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model5.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model5.add(layers.Flatten())\n",
        "model5.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "# learning\n",
        "\n",
        "model5.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model5.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model4.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model4.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train1 = model5.evaluate(train_generator)\n",
        "model5_val_results = model5.evaluate(val_generator)\n",
        "model5_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "if plottrain == True:\n",
        "  acc = history.history['acc']\n",
        "  val_acc = history.history['val_acc']\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs_range = range(EPOCHS)\n",
        "\n",
        "  plt.figure(figsize=(16, 8))\n",
        "  plt.subplot(1, 2, 1)\n",
        "  plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "  plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "\n",
        "  plt.subplot(1, 3, 3)\n",
        "  plt.plot(epochs_range, loss, label='Training Loss')\n",
        "  plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  plt.savefig('/content/drive/My Drive/RxID/RxID15/Model Images/{}-Acc_Loss.png'.format(model5.name))\n",
        "  plt.show()\n",
        "model5_val_results"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7m97N4GKBnAZ"
      },
      "source": [
        "## model6 - Acc: 0.58"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nD8OqJ4XDOYc",
        "colab_type": "code",
        "outputId": "59665ce9-4742-460a-b3a0-14e011bc8d45",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 74 images belonging to 15 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "91b2ebaa-58b5-4c8f-e291-4662efab17f8",
        "id": "c1ShPDPyBnAa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SHAPE  = 36 \n",
        "EPOCHS = 100\n",
        "plottrain = True\n",
        "\n",
        "\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_folder,\n",
        "                                                                        shuffle=True,\n",
        "                                                                        target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                        #batch_size = BATCH_SIZE) \n",
        "\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_folder,\n",
        "                                                                       shuffle=False,\n",
        "                                                                       #class_mode='binary',\n",
        "                                                                       target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                       batch_size = BATCH_SIZE)\n",
        "\n",
        "train_generator = ImageDataGenerator(rescale=1./255,\n",
        "                                     brightness_range=(.2,1),\n",
        "                                     shear_range=0.2,\n",
        "                                     channel_shift_range=128,\n",
        "                                     rotation_range=45,\n",
        "                                     vertical_flip=True,\n",
        "                                     zoom_range=0.5,).flow_from_directory(train_folder,\n",
        "                                                                          shuffle=True,\n",
        "                                                                          #class_mode='binary',\n",
        "                                                                          target_size=(IMG_SHAPE,IMG_SHAPE),\n",
        "                                                                          batch_size=BATCH_SIZE)\n",
        "# model6 = VGG16(weights='imagenet', include_top=False,input_shape=(IMG_SHAPE ,IMG_SHAPE,  3))\n",
        "# model6.layers.pop()\n",
        "# model6 = Model(inputs=model6.inputs, outputs=model6.layers[-1].output)\n",
        "\n",
        "model6 = models.Sequential(name='model6')\n",
        "\n",
        "model6.add(layers.Conv2D(768, (3,3), activation='relu',input_shape=(IMG_SHAPE ,IMG_SHAPE,  3)))\n",
        "model6.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model6.add(layers.Conv2D(1024, (3,3), activation='relu', padding=\"same\"))\n",
        "model6.add(layers.MaxPooling2D((3, 3)))\n",
        "model6.add(layers.Dropout(0.05))\n",
        "\n",
        "model6.add(layers.Conv2D(512, (3,3), activation='relu', padding=\"same\"))\n",
        "model6.add(layers.MaxPooling2D((3, 3)))\n",
        "\n",
        "model6.add(layers.Conv2D(256, (3,3), activation='relu', padding=\"same\"))\n",
        "#model6.add(layers.MaxPooling2D((3, 3))) \n",
        "\n",
        "model6.add(layers.Flatten())\n",
        "model6.add(layers.Dense(15, activation='softmax'))\n",
        "\n",
        "model6.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model6.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model4.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model4.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train1 = model6.evaluate(train_generator)\n",
        "model6_val_results = model6.evaluate(val_generator)\n",
        "model6_val_results\n",
        "#model.predict_classes(val_images)\n",
        "\n",
        "if plottrain == True:\n",
        "  acc = history.history['acc']\n",
        "  val_acc = history.history['val_acc']\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  epochs_range = range(EPOCHS)\n",
        "\n",
        "  plt.figure(figsize=(16, 8))\n",
        "  plt.subplot(1, 2, 1)\n",
        "  plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "  plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "\n",
        "  plt.subplot(1, 3, 3)\n",
        "  plt.plot(epochs_range, loss, label='Training Loss')\n",
        "  plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  #plt.savefig('./foo.png')\n",
        "  plt.show()\n",
        "model6_val_results"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 74 images belonging to 15 classes.\n",
            "Found 150 images belonging to 15 classes.\n",
            "Found 525 images belonging to 15 classes.\n",
            "Model: \"CNN 4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 34, 34, 768)       21504     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 11, 11, 768)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 11, 11, 1024)      7078912   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 3, 3, 512)         4719104   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 1, 1, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 1, 1, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 15)                3855      \n",
            "=================================================================\n",
            "Total params: 13,003,279\n",
            "Trainable params: 13,003,279\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/50\n",
            "17/17 [==============================] - 201s 12s/step - loss: 2.7158 - acc: 0.0495 - val_loss: 2.7106 - val_acc: 0.1133\n",
            "\n",
            "Epoch 00001: val_acc improved from -inf to 0.11333, saving model to vgg16_1.h5\n",
            "Epoch 2/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 2.7013 - acc: 0.0876 - val_loss: 2.2212 - val_acc: 0.1200\n",
            "\n",
            "Epoch 00002: val_acc improved from 0.11333 to 0.12000, saving model to vgg16_1.h5\n",
            "Epoch 3/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 2.6345 - acc: 0.1048 - val_loss: 2.3902 - val_acc: 0.1467\n",
            "\n",
            "Epoch 00003: val_acc improved from 0.12000 to 0.14667, saving model to vgg16_1.h5\n",
            "Epoch 4/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 2.5200 - acc: 0.1333 - val_loss: 2.3514 - val_acc: 0.2067\n",
            "\n",
            "Epoch 00004: val_acc improved from 0.14667 to 0.20667, saving model to vgg16_1.h5\n",
            "Epoch 5/50\n",
            "17/17 [==============================] - 65s 4s/step - loss: 2.3505 - acc: 0.1924 - val_loss: 1.3907 - val_acc: 0.3400\n",
            "\n",
            "Epoch 00005: val_acc improved from 0.20667 to 0.34000, saving model to vgg16_1.h5\n",
            "Epoch 6/50\n",
            "17/17 [==============================] - 65s 4s/step - loss: 2.2105 - acc: 0.2438 - val_loss: 1.1538 - val_acc: 0.3267\n",
            "\n",
            "Epoch 00006: val_acc did not improve from 0.34000\n",
            "Epoch 7/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 2.1092 - acc: 0.2819 - val_loss: 1.3704 - val_acc: 0.3333\n",
            "\n",
            "Epoch 00007: val_acc did not improve from 0.34000\n",
            "Epoch 8/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.9884 - acc: 0.2762 - val_loss: 2.5301 - val_acc: 0.3333\n",
            "\n",
            "Epoch 00008: val_acc did not improve from 0.34000\n",
            "Epoch 9/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.9269 - acc: 0.2952 - val_loss: 1.3323 - val_acc: 0.3733\n",
            "\n",
            "Epoch 00009: val_acc improved from 0.34000 to 0.37333, saving model to vgg16_1.h5\n",
            "Epoch 10/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.8237 - acc: 0.3352 - val_loss: 0.9630 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00010: val_acc improved from 0.37333 to 0.42000, saving model to vgg16_1.h5\n",
            "Epoch 11/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.7745 - acc: 0.3543 - val_loss: 1.2884 - val_acc: 0.3400\n",
            "\n",
            "Epoch 00011: val_acc did not improve from 0.42000\n",
            "Epoch 12/50\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.7281 - acc: 0.3619 - val_loss: 1.3990 - val_acc: 0.4133\n",
            "\n",
            "Epoch 00012: val_acc did not improve from 0.42000\n",
            "Epoch 13/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.7428 - acc: 0.3714 - val_loss: 0.8592 - val_acc: 0.3733\n",
            "\n",
            "Epoch 00013: val_acc did not improve from 0.42000\n",
            "Epoch 14/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.7743 - acc: 0.3486 - val_loss: 1.0669 - val_acc: 0.3533\n",
            "\n",
            "Epoch 00014: val_acc did not improve from 0.42000\n",
            "Epoch 15/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.7202 - acc: 0.3619 - val_loss: 1.0584 - val_acc: 0.4133\n",
            "\n",
            "Epoch 00015: val_acc did not improve from 0.42000\n",
            "Epoch 16/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6702 - acc: 0.3981 - val_loss: 0.8625 - val_acc: 0.4000\n",
            "\n",
            "Epoch 00016: val_acc did not improve from 0.42000\n",
            "Epoch 17/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6901 - acc: 0.3905 - val_loss: 0.6338 - val_acc: 0.3800\n",
            "\n",
            "Epoch 00017: val_acc did not improve from 0.42000\n",
            "Epoch 18/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6164 - acc: 0.3962 - val_loss: 0.9483 - val_acc: 0.4133\n",
            "\n",
            "Epoch 00018: val_acc did not improve from 0.42000\n",
            "Epoch 19/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.6533 - acc: 0.4190 - val_loss: 0.6406 - val_acc: 0.3867\n",
            "\n",
            "Epoch 00019: val_acc did not improve from 0.42000\n",
            "Epoch 20/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5557 - acc: 0.4324 - val_loss: 1.6483 - val_acc: 0.3800\n",
            "\n",
            "Epoch 00020: val_acc did not improve from 0.42000\n",
            "Epoch 21/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5786 - acc: 0.4229 - val_loss: 0.8729 - val_acc: 0.4733\n",
            "\n",
            "Epoch 00021: val_acc improved from 0.42000 to 0.47333, saving model to vgg16_1.h5\n",
            "Epoch 22/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5608 - acc: 0.4133 - val_loss: 0.8842 - val_acc: 0.4533\n",
            "\n",
            "Epoch 00022: val_acc did not improve from 0.47333\n",
            "Epoch 23/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5302 - acc: 0.4400 - val_loss: 0.4199 - val_acc: 0.4533\n",
            "\n",
            "Epoch 00023: val_acc did not improve from 0.47333\n",
            "Epoch 24/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4966 - acc: 0.4438 - val_loss: 0.5085 - val_acc: 0.5067\n",
            "\n",
            "Epoch 00024: val_acc improved from 0.47333 to 0.50667, saving model to vgg16_1.h5\n",
            "Epoch 25/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5009 - acc: 0.4400 - val_loss: 0.5271 - val_acc: 0.5133\n",
            "\n",
            "Epoch 00025: val_acc improved from 0.50667 to 0.51333, saving model to vgg16_1.h5\n",
            "Epoch 26/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5581 - acc: 0.4324 - val_loss: 0.6378 - val_acc: 0.4333\n",
            "\n",
            "Epoch 00026: val_acc did not improve from 0.51333\n",
            "Epoch 27/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4705 - acc: 0.4648 - val_loss: 0.6178 - val_acc: 0.5067\n",
            "\n",
            "Epoch 00027: val_acc did not improve from 0.51333\n",
            "Epoch 28/50\n",
            "17/17 [==============================] - 63s 4s/step - loss: 1.4094 - acc: 0.4590 - val_loss: 0.5787 - val_acc: 0.4333\n",
            "\n",
            "Epoch 00028: val_acc did not improve from 0.51333\n",
            "Epoch 29/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4085 - acc: 0.4686 - val_loss: 0.2454 - val_acc: 0.5267\n",
            "\n",
            "Epoch 00029: val_acc improved from 0.51333 to 0.52667, saving model to vgg16_1.h5\n",
            "Epoch 30/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.5238 - acc: 0.4419 - val_loss: 1.1094 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00030: val_acc did not improve from 0.52667\n",
            "Epoch 31/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4347 - acc: 0.4724 - val_loss: 0.6036 - val_acc: 0.5133\n",
            "\n",
            "Epoch 00031: val_acc did not improve from 0.52667\n",
            "Epoch 32/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4330 - acc: 0.4781 - val_loss: 0.6811 - val_acc: 0.4267\n",
            "\n",
            "Epoch 00032: val_acc did not improve from 0.52667\n",
            "Epoch 33/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3816 - acc: 0.4743 - val_loss: 1.0003 - val_acc: 0.4867\n",
            "\n",
            "Epoch 00033: val_acc did not improve from 0.52667\n",
            "Epoch 34/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4975 - acc: 0.4648 - val_loss: 0.6879 - val_acc: 0.4200\n",
            "\n",
            "Epoch 00034: val_acc did not improve from 0.52667\n",
            "Epoch 35/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.4214 - acc: 0.4686 - val_loss: 1.2324 - val_acc: 0.4867\n",
            "\n",
            "Epoch 00035: val_acc did not improve from 0.52667\n",
            "Epoch 36/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3842 - acc: 0.4933 - val_loss: 0.4107 - val_acc: 0.4800\n",
            "\n",
            "Epoch 00036: val_acc did not improve from 0.52667\n",
            "Epoch 37/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2948 - acc: 0.4990 - val_loss: 0.1190 - val_acc: 0.5667\n",
            "\n",
            "Epoch 00037: val_acc improved from 0.52667 to 0.56667, saving model to vgg16_1.h5\n",
            "Epoch 38/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3574 - acc: 0.5162 - val_loss: 0.7310 - val_acc: 0.5533\n",
            "\n",
            "Epoch 00038: val_acc did not improve from 0.56667\n",
            "Epoch 39/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3966 - acc: 0.4838 - val_loss: 0.3639 - val_acc: 0.5400\n",
            "\n",
            "Epoch 00039: val_acc did not improve from 0.56667\n",
            "Epoch 40/50\n",
            "17/17 [==============================] - 65s 4s/step - loss: 1.3591 - acc: 0.4990 - val_loss: 0.1684 - val_acc: 0.5733\n",
            "\n",
            "Epoch 00040: val_acc improved from 0.56667 to 0.57333, saving model to vgg16_1.h5\n",
            "Epoch 41/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3168 - acc: 0.5124 - val_loss: 0.5497 - val_acc: 0.5067\n",
            "\n",
            "Epoch 00041: val_acc did not improve from 0.57333\n",
            "Epoch 42/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2935 - acc: 0.5467 - val_loss: 0.2487 - val_acc: 0.5267\n",
            "\n",
            "Epoch 00042: val_acc did not improve from 0.57333\n",
            "Epoch 43/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3176 - acc: 0.5276 - val_loss: 0.2537 - val_acc: 0.5467\n",
            "\n",
            "Epoch 00043: val_acc did not improve from 0.57333\n",
            "Epoch 44/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2772 - acc: 0.5448 - val_loss: 0.3024 - val_acc: 0.6067\n",
            "\n",
            "Epoch 00044: val_acc improved from 0.57333 to 0.60667, saving model to vgg16_1.h5\n",
            "Epoch 45/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2055 - acc: 0.5505 - val_loss: 0.1063 - val_acc: 0.5800\n",
            "\n",
            "Epoch 00045: val_acc did not improve from 0.60667\n",
            "Epoch 46/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.1991 - acc: 0.5486 - val_loss: 0.3812 - val_acc: 0.5333\n",
            "\n",
            "Epoch 00046: val_acc did not improve from 0.60667\n",
            "Epoch 47/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2727 - acc: 0.5181 - val_loss: 0.3416 - val_acc: 0.5400\n",
            "\n",
            "Epoch 00047: val_acc did not improve from 0.60667\n",
            "Epoch 48/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3031 - acc: 0.5086 - val_loss: 0.5345 - val_acc: 0.5333\n",
            "\n",
            "Epoch 00048: val_acc did not improve from 0.60667\n",
            "Epoch 49/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.3207 - acc: 0.5181 - val_loss: 0.6639 - val_acc: 0.5400\n",
            "\n",
            "Epoch 00049: val_acc did not improve from 0.60667\n",
            "Epoch 50/50\n",
            "17/17 [==============================] - 64s 4s/step - loss: 1.2362 - acc: 0.5352 - val_loss: 0.2651 - val_acc: 0.5733\n",
            "\n",
            "Epoch 00050: val_acc did not improve from 0.60667\n",
            "17/17 [==============================] - 61s 4s/step\n",
            "5/5 [==============================] - 16s 3s/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.26507696509361267, 0.5733333230018616]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "143afb29-e8a1-4e96-c5a9-4df9b9decb1a",
        "id": "RXo7cZBkUh9s",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "source": [
        "model4.predict_generator(test_generator,10)[:5]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.5603587e-01, 1.3551349e-04, 9.0713213e-05, 8.9450151e-02,\n",
              "        3.3724788e-04, 1.9175600e-01, 9.2876321e-03, 3.6157876e-01,\n",
              "        1.1475331e-04, 7.0058599e-02, 9.2301272e-02, 5.1353173e-04,\n",
              "        2.7433937e-02, 3.9138136e-05, 8.6686132e-04],\n",
              "       [1.2499259e-09, 3.4617544e-05, 5.2671645e-09, 4.4543671e-05,\n",
              "        4.2752055e-07, 7.1680397e-01, 2.1699364e-01, 4.9954217e-08,\n",
              "        6.4434238e-02, 1.9503043e-04, 2.0082622e-10, 1.2558334e-03,\n",
              "        8.7603396e-05, 1.3863835e-10, 1.4999064e-04],\n",
              "       [1.0535298e-11, 9.8759544e-19, 8.3027976e-17, 5.8028089e-11,\n",
              "        8.6178517e-01, 5.6092631e-12, 1.1231292e-11, 2.2120450e-12,\n",
              "        1.7435057e-15, 1.3620343e-09, 1.5526190e-10, 7.7676678e-11,\n",
              "        1.3388103e-08, 1.2064401e-09, 1.3821489e-01],\n",
              "       [1.1483950e-06, 5.3155227e-11, 4.7285376e-10, 1.6375064e-09,\n",
              "        4.0813600e-05, 4.1771662e-09, 6.3269066e-09, 1.9558092e-07,\n",
              "        3.3644291e-08, 2.8014643e-10, 3.6251902e-05, 2.3909703e-09,\n",
              "        1.6596490e-05, 9.9893409e-01, 9.7093423e-04],\n",
              "       [1.0942648e-03, 1.4457896e-10, 4.3438684e-09, 5.4860353e-01,\n",
              "        6.3001671e-09, 1.6735020e-01, 4.7668000e-03, 8.8961028e-02,\n",
              "        7.5857737e-11, 1.8517938e-01, 9.6072274e-04, 3.0186015e-05,\n",
              "        3.0538591e-03, 5.1469591e-14, 8.9179872e-09]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RyJ-z-_eCdVU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model4."
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "1d259407-4346-4f8f-899e-d3f206c2a28d",
        "id": "ccgSYgNxUh9t",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        }
      },
      "source": [
        "model4.predict_classes(test_generator)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-dd2f2b6d5bb4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/sequential.py\u001b[0m in \u001b[0;36mpredict_classes\u001b[0;34m(self, x, batch_size, verbose)\u001b[0m\n\u001b[1;32m    266\u001b[0m             \u001b[0mA\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0marray\u001b[0m \u001b[0mof\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m         \"\"\"\n\u001b[0;32m--> 268\u001b[0;31m         \u001b[0mproba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mproba\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mproba\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1420\u001b[0m         \"\"\"\n\u001b[1;32m   1421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1422\u001b[0;31m         \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_or_infer_batch_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1423\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1424\u001b[0m         \u001b[0;31m# Case 1: generator-like. Input is Python generator, or Sequence object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36m_validate_or_infer_batch_size\u001b[0;34m(self, batch_size, steps, x)\u001b[0m\n\u001b[1;32m    910\u001b[0m         \"\"\"\n\u001b[1;32m    911\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mtraining_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_generator_or_sequence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m             raise ValueError('The `batch_size` argument must not be specified when'\n\u001b[0m\u001b[1;32m    913\u001b[0m                              ' using a generator or Sequence as an input.')\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: The `batch_size` argument must not be specified when using a generator or Sequence as an input."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "64905d71-bda4-4894-d8cf-7f9d6ef228cf",
        "id": "1KAod1nFUh9u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "test_labels[0]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 1., 0., 0., 0., 0., 0., 0.], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "efac7e76-a7e2-4548-8fe1-b3d52c2ea14d",
        "id": "1DOm4QTJUh9w",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        }
      },
      "source": [
        "plt.imshow(test_images[:1][0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ff603ae0e80>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a65Qj-5tt7Ir",
        "colab_type": "code",
        "outputId": "d24703de-eb85-43af-f0ed-473dec66e5b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        }
      },
      "source": [
        "test_images[:1]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-54-f1ce448e626f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_images\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'test_images' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7lZ5brKLZdrz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "tf.keras.applications.VGG19(\n",
        "    include_top=True,\n",
        "    weights=\"imagenet\",\n",
        "    input_tensor=None,\n",
        "    input_shape=None,\n",
        "    pooling=None,\n",
        "    classes=1000,\n",
        "    classifier_activation=\"softmax\",\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wcDeYz3b4qSn",
        "colab_type": "code",
        "outputId": "bb502150-ebec-41ad-9130-a2cc0cf4cd5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        }
      },
      "source": [
        "tf.math.confusion_matrix(\n",
        "    val_labels[:5][1], \n",
        "    model2.predict_classes(test_images[:5]), \n",
        "    num_classes=8, weights=None, dtype=tf.dtypes.int32,\n",
        "    #name=None\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-83b973ddb48b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mval_labels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_images\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0;31m#name=None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m )\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/confusion_matrix.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(labels, predictions, num_classes, weights, dtype, name)\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m     \u001b[0mshape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_classes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m     \u001b[0mindices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    193\u001b[0m     values = (array_ops.ones_like(predictions, dtype)\n\u001b[1;32m    194\u001b[0m               if weights is None else weights)\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[0;34m\"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m       \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py\u001b[0m in \u001b[0;36mstack\u001b[0;34m(values, axis, name)\u001b[0m\n\u001b[1;32m   1340\u001b[0m                        (axis, -expanded_num_dims, expanded_num_dims))\n\u001b[1;32m   1341\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1342\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mgen_array_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1344\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_array_ops.py\u001b[0m in \u001b[0;36mpack\u001b[0;34m(values, axis, name)\u001b[0m\n\u001b[1;32m   6335\u001b[0m         \u001b[0;32mpass\u001b[0m  \u001b[0;31m# Add nodes to the TensorFlow graph.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6336\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6337\u001b[0;31m       \u001b[0m_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6338\u001b[0m   \u001b[0;31m# Add nodes to the TensorFlow graph.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6339\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   6651\u001b[0m   \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6652\u001b[0m   \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6653\u001b[0;31m   \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6654\u001b[0m   \u001b[0;31m# pylint: enable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6655\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/six.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(value, from_value)\u001b[0m\n",
            "\u001b[0;31mInvalidArgumentError\u001b[0m: Shapes of all inputs must match: values[0].shape = [8] != values[1].shape = [5] [Op:Pack] name: stack"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "u0MZtT4nn_cW"
      },
      "source": [
        "## model5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "cV0RunCln_cX",
        "colab": {}
      },
      "source": [
        "model3 = models.Sequential(name='CNN 3HL(1024/512/256/512)-5Ep-TL=False')\n",
        "\n",
        "model3.add(layers.Conv2D(2048, (3, 3), activation='relu',input_shape=(256 ,256,  3)))\n",
        "model3.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model3.add(layers.Conv2D(1024, (3, 3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model3.add(layers.Conv2D(512, (3, 3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model3.add(layers.Conv2D(512, (3, 3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((2, 2))) \n",
        "\n",
        "model3.add(layers.Conv2D(256, (3, 3), activation='relu', padding=\"same\"))\n",
        "model3.add(layers.MaxPooling2D((2, 2))) \n",
        "\n",
        "\n",
        "model3.add(layers.Flatten())\n",
        "model3.add(layers.Dense(11, activation='softmax'))\n",
        "\n",
        "model3.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model3.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model4.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model4.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train = model3.evaluate(train_images, train_labels)\n",
        "model3_val_results = model3.evaluate(val_images, val_labels)\n",
        "\n",
        "results_train\n",
        "\n",
        "model3_val_results\n",
        "\n",
        "#model.predict_classes(val_images)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "ndY3rCE3DDy3"
      },
      "source": [
        "## model6"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "3e278427-ecc5-4e3c-d9ba-4b40b85814f9",
        "id": "9ixX1oN5DDy4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "model4 = models.Sequential(name='CNN 3HL(1024/512/256/512)-5Ep-TL=False')\n",
        "\n",
        "model4.add(layers.Conv2D(1024, (3, 3), activation='relu',input_shape=(64 ,64,  3)))\n",
        "model4.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model4.add(layers.Conv2D(2048, (3, 3), activation='relu', padding=\"same\"))\n",
        "model4.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model4.add(layers.Conv2D(256, (3, 3), activation='relu', padding=\"same\"))\n",
        "model4.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model4.add(layers.Conv2D(512, (3, 3), activation='relu', padding=\"same\"))\n",
        "model4.add(layers.MaxPooling2D((2, 2))) \n",
        "\n",
        "\n",
        "model4.add(layers.Flatten())\n",
        "model4.add(layers.Dense(11, activation='softmax'))\n",
        "\n",
        "model4.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['acc'])\n",
        "model4.summary()\n",
        "\n",
        "checkpoint = ModelCheckpoint(\"/content/drive/My Drive/RxID/RxID15/Models/RxID15{}.h5\".format(model4.name), monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "\n",
        "history = model4.fit(train_generator,\n",
        "                    epochs=EPOCHS,\n",
        "                    #batch_size=32,\n",
        "                    #validation_split= 0.1,\n",
        "                    validation_data=val_generator,\n",
        "                     callbacks=[checkpoint,early],\n",
        "                    verbose=1)\n",
        "\n",
        "results_train4 = model4.evaluate(train_images, train_labels)\n",
        "results_test4 = model4.evaluate(val_images, val_labels)\n",
        "\n",
        "results_train\n",
        "\n",
        "results_test\n",
        "\n",
        "#model.predict_classes(val_images)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"CNN 3HL(1024/512/256/512)-5Ep-TL=False\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_25 (Conv2D)           (None, 62, 62, 1024)      28672     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_25 (MaxPooling (None, 31, 31, 1024)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_26 (Conv2D)           (None, 31, 31, 2048)      18876416  \n",
            "_________________________________________________________________\n",
            "max_pooling2d_26 (MaxPooling (None, 15, 15, 2048)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_27 (Conv2D)           (None, 15, 15, 256)       4718848   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_27 (MaxPooling (None, 7, 7, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_28 (Conv2D)           (None, 7, 7, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_28 (MaxPooling (None, 3, 3, 512)         0         \n",
            "_________________________________________________________________\n",
            "flatten_7 (Flatten)          (None, 4608)              0         \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 11)                50699     \n",
            "=================================================================\n",
            "Total params: 24,854,795\n",
            "Trainable params: 24,854,795\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Train on 783 samples, validate on 88 samples\n",
            "Epoch 1/5\n",
            " 96/783 [==>...........................] - ETA: 1:31 - loss: 3.2600 - acc: 0.0833"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vaBinm7bmiah",
        "colab_type": "text"
      },
      "source": [
        "---"
      ]
    }
  ]
}